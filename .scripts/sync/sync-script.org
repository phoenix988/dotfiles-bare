#+title: Sync Script
#+DESCRIPTION: This script will sync choosen dotfiles, script etc with my git repos
#+AUTHOR: Karl Fredin
#+PROPERTY: header-args :tangle sync-script
#+STARTUP: showeverything

* TABLE OF CONTENT
- [[About This Script][About]]
- [[Example ]]
- [[Variables][Variables]]
  - [[Script Paths]]
  - [[Config Paths]]
  - [[Other Variables]]
- [[Script]]
  - [[Declare]]
  - [[Cases][Cases]]
  - [[Function][The Function]]

** About This Script
This is a script I wrote to make it easier to keep my gitrepos up to date.
Basically this script will compare 2 files that you specify in the files array
And if it detecs that there is a diffrent in the 2 files or folders this script
will copy over the newest file using the basic command cp. Per default this
script have no output but if you specify -v than you will see which files
this script are overwriting or if there is no change detected. you can also
specify -f to specify a file where you want to store the output in case you want to
inspect it later. You can also combine the two switches

** Example
This Example here will show you the which files it syncs
#+BEGIN_SRC
bash sync-script -v
#+END_SRC

*** Variables
This is the Config files that this script will sync
if it detects that it has changed
****  Script Paths
|---------------------------------------------+---------------------------------------------------|
| Scripts Home                                | Scripts Repo                                      |
|---------------------------------------------+---------------------------------------------------|
| $HOME/.dmenu                                | $DMSCRIPTS_REPO_PATH/.dmenu                       |
| $HOME/.scripts/activated                    | $DOTFILES_REPO_PATH/.scripts/activated            |
| $HOME/.scripts/restart                      | $DOTFILES_REPO_PATH/.scripts/restart              |
| $HOME/.scripts/backup-scripts/sync          | $DOTFILES_REPO_PATH/.scripts/backup-scripts/sync  |
| $HOME/.scripts/backup-scripts/btrfs         | $DOTFILES_REPO_PATH/.scripts/backup-scripts/btrfs |
| $HOME/.scripts/backup-scripts/yandex-script | $DOTFILES_REPO_PATH/.scripts/yandex-script        |
| $HOME/.scripts/docker                       | $DOTFILES_REPO_PATH/.scripts/docker               |

**** Config Paths
|--------------------------------------+----------------------------------------------------|
| Config Path Home                     | Config Path Repos                                  |
|--------------------------------------+----------------------------------------------------|
| $HOME/.zshrc                         | $DOTFILES_REPO_PATH/.zshrc                         |
| $HOME/.bashrc                        | $DOTFILES_REPO_PATH/.bashrc                        |
| $HOME/.config/bash                   | $DOTFILES_REPO_PATH/.config/bash                   |
| $HOME/.config/kitty/kitty.conf       | $DOTFILES_REPO_PATH/.config/kitty/kitty.conf       |
| $HOME/.config/alacritty              | $DOTFILES_REPO_PATH/.config/alacritty              |
| $HOME/.config/starship.toml          | $DOTFILES_REPO_PATH/.config/starship.toml          |
| $HOME/.config/qtile/config.py        | $DOTFILES_REPO_PATH/.config/qtile/config.py        |
| $HOME/.config/qtile/autostart.sh     | $DOTFILES_REPO_PATH/.config/qtile/autostart.sh     |
| $HOME/.config/qtile/README.org       | $DOTFILES_REPO_PATH/.config/qtile/README.org       |
| $HOME/.config/qtile/themes           | $DOTFILES_REPO_PATH/.config/qtile/themes           |
| $HOME/.config/hypr                   | $DOTFILES_REPO_PATH/.config/hypr                   |
| $HOME/.config/waybar/config.jsonc    | $DOTFILES_REPO_PATH/.config/waybar/config.jsonc    |
| $HOME/.config/waybar/style.css       | $DOTFILES_REPO_PATH/.config/waybar/style.css       |
| $HOME/.config/vifm/vifmrc            | $DOTFILES_REPO_PATH/.config/vifm/vifmrc            |
| $HOME/.config/wlogout                | $DOTFILES_REPO_PATH/.config/wlogout                |
| $HOME/.config/rofi/themes            | $DOTFILES_REPO_PATH/.config/rofi/themes            |
| $HOME/.config/rofi/config.rasi       | $DOTFILES_REPO_PATH/.config/rofi/config.rasi       |
| $HOME/.config/wofi                   | $DOTFILES_REPO_PATH/.config/wofi                   |
| $HOME/.config/doom                   | $DOTFILES_REPO_PATH/.config/doom                   |
| $HOME/.config/doom/eshell            | $DOTFILES_REPO_PATH/.config/doom/eshell            |
| $HOME/.config/nvim/init.lua          | $DOTFILES_REPO_PATH/.config/nvim/init.lua          |
| $HOME/.config/nvim/lua/karl          | $DOTFILES_REPO_PATH/.config/nvim/lua/karl          |
| $HOME/.config/nvim/after/plugin      | $DOTFILES_REPO_PATH/.config/nvim/after/plugin      |
| $HOME/.config/alias-zsh-bash         | $DOTFILES_REPO_PATH/.config/alias-zsh-bash         |
| $HOME/.config/fish/conf.d/alias.fish | $DOTFILES_REPO_PATH/.config/fish/conf.d/alias.fish |
| $HOME/.config/fish/config.fish       | $DOTFILES_REPO_PATH/.config/fish/config.fish       |
| $HOME/.tmux.conf.local               | $DOTFILES_REPO_PATH/.tmux.conf.local               |
| $HOME/.config/qutebrowser/config.py  | $DOTFILES_REPO_PATH/.config/qutebrowser/config.py  |
| $HOME/.config/qutebrowser/quickmarks | $DOTFILES_REPO_PATH/.config/qutebrowser/quickmarks |


**** Other Variables
Other Variables that we set that we use later in the script
We specity the paths to our dotfiles repos and then we specify
some colors that we want our output to be when we specify -v
|---------------------+------------------------|
| Variable            | Value                  |
|---------------------+------------------------|
| DOTFILES_REPO_PATH  | HOME/myrepos/dotfiles  |
| DMSCRIPTS_REPO_PATH | HOME/myrepos/dmscripts |
| GREEN               | tput setaf 2           |
| RED                 | tput setaf 1           |

*** Script
**** Declare
#+BEGIN_SRC sh :tangle sync-script
#!/usr/bin/env bash

DATE=$(date +%d-%h-%Y-%H-%M)

DOTFILES_REPO_PATH="$HOME/myrepos/dotfiles"
DMSCRIPTS_REPO_PATH="$HOME/myrepos/dmscripts"

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)

declare -A files

files[$HOME/.dmenu]="$DMSCRIPTS_REPO_PATH/.dmenu"
files[$HOME/.scripts]="$DOTFILES_REPO_PATH/.scripts"

files[$HOME/.zshrc]="$DOTFILES_REPO_PATH/.zshrc"
files[$HOME/.bashrc]="$DOTFILES_REPO_PATH/.bashrc"
files[$HOME/.config/bash]="$DOTFILES_REPO_PATH/.config/bash"
files[$HOME/.config/kitty/kitty.conf]="$DOTFILES_REPO_PATH/.config/kitty/kitty.conf"
files[$HOME/.config/alacritty]="$DOTFILES_REPO_PATH/.config/alacritty"
files[$HOME/.config/starship.toml]="$DOTFILES_REPO_PATH/.config/starship.toml"
files[$HOME/.config/qtile/config.py]="$DOTFILES_REPO_PATH/.config/qtile/config.py"
files[$HOME/.config/qtile/README.org]="$DOTFILES_REPO_PATH/.config/qtile/README.org"
files[$HOME/.config/qtile/autostart.sh]="$DOTFILES_REPO_PATH/.config/qtile/autostart.sh"
files[$HOME/.config/qtile/themes]="$DOTFILES_REPO_PATH/.config/qtile/themes"
files[$HOME/.config/hypr]="$DOTFILES_REPO_PATH/.config/hypr"
files[$HOME/.config/waybar/config.jsonc]="$DOTFILES_REPO_PATH/.config/waybar/config.jsonc"
files[$HOME/.config/waybar/style.css]="$DOTFILES_REPO_PATH/.config/waybar/style.css"
files[$HOME/.config/vifm/vifmrc]="$DOTFILES_REPO_PATH/.config/vifm/vifmrc"
files[$HOME/.config/wlogout]="$DOTFILES_REPO_PATH/.config/wlogout"
files[$HOME/.config/wofi]="$DOTFILES_REPO_PATH/.config/wofi"
files[$HOME/.config/rofi/themes]="$DOTFILES_REPO_PATH/.config/rofi/themes"
files[$HOME/.config/rofi/config.rasi]="$DOTFILES_REPO_PATH/.config/rofi/config.rasi"
files[$HOME/.config/doom]="$DOTFILES_REPO_PATH/.config/doom"
files[$HOME/.config/doom/eshell]="$DOTFILES_REPO_PATH/.config/doom/eshell"
files[$HOME/.config/nvim/init.lua]="$DOTFILES_REPO_PATH/.config/nvim/init.lua"
files[$HOME/.config/nvim/lua/karl]="$DOTFILES_REPO_PATH/.config/nvim/lua/karl"
files[$HOME/.config/nvim/README.org]="$DOTFILES_REPO_PATH/.config/nvim/README.org"
files[$HOME/.config/nvim/after/plugin]="$DOTFILES_REPO_PATH/.config/nvim/after/plugin"
files[$HOME/.config/alias-zsh-bash]="$DOTFILES_REPO_PATH/.config/alias-zsh-bash"
files[$HOME/.config/fish/conf.d/alias.fish]="$DOTFILES_REPO_PATH/.config/fish/conf.d/alias.fish"
files[$HOME/.config/fish/config.fish]="$DOTFILES_REPO_PATH/.config/fish/config.fish"
files[$HOME/.tmux.conf.local]="$DOTFILES_REPO_PATH/.tmux.conf.local"
files[$HOME/.config/qutebrowser/config.py]="$DOTFILES_REPO_PATH/.config/qutebrowser/config.py"
files[$HOME/.config/qutebrowser/quickmarks]="$DOTFILES_REPO_PATH/.config/qutebrowser/quickmarks"
#+END_SRC


**** Cases
This lets us specify -f (file) and -v (verbose)
as options in the script. -f requires an argument
if you dont specify a switch then it will simply not output anything

#+BEGIN_SRC sh :tangle sync-script
while getopts ":f:v" opt; do
  case $opt in
     f)
      file="$OPTARG"
      ;;
     v)
      flag=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
#+END_SRC

**** Function
This is the main function that makes this script work
Bascially first if detects if the target is a directory or file
if its a directory then its gonna search the directory recusivly
and then compare all the files inside that directory to detects a diffrent
and if it's just a file then it will simply compare the 2 files to detect a diffrent
I'm creating a few loops to loop through the array and directories.
And then I'm using an IF statement to compare the file using diff
#+BEGIN_SRC sh :tangle sync-script
for COMPARE in $(printf '%s\n' "${!files[@]}") ; do

COMPARE_SRC=$(printf '%s\n' "${files[$COMPARE]}")

if [ -d $COMPARE ] && [ -d $COMPARE_SRC ] ; then

       SOURCE=$(printf '%s\n' $(printf '%s\n' "${files["${COMPARE}"]}") )

for SOURCE_LOOP in $(find  $SOURCE/* -type f ) ; do

       DEST=$(echo $SOURCE_LOOP | sed -e "s|$DMSCRIPTS_REPO_PATH|$HOME|"  -e "s|$DOTFILES_REPO_PATH|$HOME|" )

if cmp --quiet $DEST $SOURCE_LOOP ; then

    if [ -z $DEST  ] ; then

       echo "" &> /dev/null

    else
          [ -z $file ] || echo -e "-- No Change Detected: ${COMPARE}" >> $file


       if [ "$flag" = 'true' ] ; then


             [ -z $DEST ] && echo "" &> /dev/null || echo -e "${RED}-- No Change Detected: ${DEST}"
       fi

    fi

else

       CHECK_FOR_LATEST=$(ls -lt  $DEST $SOURCE_LOOP 2> /dev/null | head -n1 | awk '{print $NF}')

if [ "$CHECK_FOR_LATEST" = "$DEST" ] ; then

       LATEST=$(echo $CHECK_FOR_LATEST)
       OLDEST=$(echo $SOURCE_LOOP)

elif [ "$CHECK_FOR_LATEST" = "$SOURCE_LOOP" ] ; then

       LATEST=$(echo $CHECK_FOR_LATEST)
       OLDEST=$(echo $DEST)

fi

       SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
       SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

       cp -r $LATEST $OLDEST 2> /dev/null

       [ -z $file ] ||  echo -e "++ Moving: ${LATEST} to ${OLDEST}" >> $file

        if [ "$flag" = 'true' ] ; then

       [ -z $LATEST ] && echo "" &> /dev/null || echo -e "${GREEN}++ Moving: ${LATEST} to ${OLDEST}"

        sleep 1

       fi
fi

fi


done

elif [ -f $COMPARE ] && [ -f $COMPARE_SRC ] ; then


      COMPARE_WITH=$(printf '%s\n' "${files["${COMPARE}"]}")

if cmp --quiet $COMPARE $COMPARE_WITH ; then


    if [ -z $COMPARE  ] ; then

       echo "" &> /dev/null

    else

      [ -z $file ] || echo -e "-- No Change Detected: ${COMPARE}" >> $file

       if [ "$flag" = 'true' ] ; then

      [ -z $COMPARE ] && echo "" &> /dev/null || echo -e "${RED}-- No Change Detected: ${COMPARE}"


       fi

    fi


else

      CHECK_FOR_LATEST=$(ls -lt  $COMPARE_WITH $COMPARE 2> /dev/null | head -n1 | awk '{print $NF}')

if [ "$CHECK_FOR_LATEST" = "$COMPARE" ] ; then

      LATEST=$(echo $CHECK_FOR_LATEST)
      OLDEST=$(echo $COMPARE_WITH)

elif [ "$CHECK_FOR_LATEST" = "$COMPARE_WITH" ] ; then

      LATEST=$(echo $CHECK_FOR_LATEST)
      OLDEST=$(echo $COMPARE)

fi

      SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
      SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

     cp -r $LATEST $OLDEST 2> /dev/null

          [ -z $file ] ||  echo -e "++ Moving: ${LATEST} to ${OLDEST}" >> $file


        if [ "$flag" = 'true' ] ; then


          [ -z $LATEST ] && echo "" &> /dev/null || echo -e "${GREEN}++ Moving: ${LATEST} to ${OLDEST}"

          sleep 1

       fi


fi

fi

fi

done
#+END_SRC
