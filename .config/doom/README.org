#+title: Doom Emacs
#+DESCRIPTION: My personal doom emacs config
#+AUTHOR: Karl Fredin

[[file:./images/doom-emacs-dash.png]]


* TABLE OF CONTENT
- [[ABOUT My Doom][ABOUT]]
- [[AUTOCOMPLETION]]
- [[BEACON][BEACON]]
- [[CENTAUR Tabs][CENTAUR TABS]]
- [[FONTS][FONTS]]
- [[WORKSPACES][KEYBINDINGS]]
  - [[WORKSPACES][WORKSPACES]]
    - [[SPLITS][SPLITS]]
    - [[TABS][TABS]]
  - [[FILE MANAGEMENT]]
    - [[DIRED][DIRED]]
    - [[NEOTREE][NEOTREE]]
    - [[TERMINAL][TERM]]
  - [[HARPOON]]
- [[LINE Numbers][LINE NUMBERS]]
- [[SHELL][SHELL]]
- [[START Page][START PAGE]]
- [[THEMES][THEMES]]



** ABOUT MY DOOM
This is my personal Doom Emacs config that I have written using emacs org mode
so that I can easily make comments inside the document so it's easier to read and
know whats going on. In order to use this config you need to have Doom Emacs installed.

** AUTOCOMPLETION
Adding company backends for autocompletion
#+begin_src emacs-lisp :tangle config.el
(add-hook 'after-init-hook 'global-company-mode)
(setq company-backends (delete 'company-capf company-backends))
(add-to-list 'company-backends 'company-files)
#+end_src


** BEACON
Never lose your cursor! Beacon makes your cursor shine when you scroll
#+begin_src emacs-lisp :tangle config.el

(beacon-mode 1)

#+end_src

** CENTAUR TABS
settings for centaur tabs if you want, change here if
you dont want the tabs to be visible
and change over if you want the tabs to be at the bottom

Keybinding I have set for it for disable the tabs

| Command           | Description | Keybindings |
|-------------------+-------------+-------------|
| centaur-tabs-mode | Toggle Tabs | SPC t h     |


#+begin_src emacs-lisp :tangle config.el
;;(setq centaur-tabs-set-bar 'over)
;;(centaur-tabs-mode t)
#+end_src

** FONTS
The various font settings for doom emacs. If you want to change the font
Family and size you can do that here. you can set italic font,big font and normal font.
#+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src



** KEYBINDINGS
This is my custom keybindings I prefer to use. For various task
You can do inside of emacs
*** WORKSPACES
Keybindings to manipulate workspaces/tabs. To switch work space you can
just do ctrl plus number of workspace you want to move to in order to switch
fast and efficent

**** SPLITS
Custom keybidning to move cursor between splits
I prefer to be able to just move with CTRL + the vim keys

| Command           | Description                    | Keybindings |
|-------------------+--------------------------------+-------------|
| evil-window-right | move cursor to the right split | C-l         |
| evil-window-left  | move cursor to the left split  | C-h         |
| evil-window-up    | move cursor up in the split    | C-k         |
| evil-window-down  | move cursor down in the split  | C-j         |

#+begin_src emacs-lisp :tangle config.el
(map! "C-l" #'evil-window-right)
(map! "C-h" #'evil-window-left)
(map! "C-k" #'evil-window-up)
(map! "C-j" #'evil-window-down)
#+end_src


**** TABS
My keybinding for creating new workspaces and switching between them

| Command                | Description                         | Keybindings    |
|------------------------+-------------------------------------+----------------|
| +workspace/new         | Create new workspace                | SPC t n        |
| +workspace/delete      | Remove workspace                    | SPC t d        |
| +workspace/new-named   | New name for workspace              | SPC t N        |
| +workspace/swap-left   | swap workspace to the left          | SPC t j        |
| +workspace/swap-right  | swap workspace to the right         | SPC t k        |
| +workspace/Load        | Load new workspace and switch to it | SPC t L        |
| +workspace/switch-to-0 | Switch to workspace 1               | C-1 or SPC t 1 |
| +workspace/switch-to-1 | Switch to workspace 2               | C-2 or SPC t 2 |
| +workspace/switch-to-2 | Switch to workspace 3               | C-3 or SPC t 3 |
| +workspace/switch-to-3 | Switch to workspace 4               | C-4 or SPC t 4 |
| +workspace/switch-to-4 | Switch to workspace 5               | C-5 or SPC t 5 |
| +workspace/switch-to-5 | Switch to workspace 6               | C-6 or SPC t 6 |
| +workspace/switch-to-6 | Switch to workspace 7               | C-7 or SPC t 7 |
| +workspace/switch-to-7 | Switch to workspace 8               | C-8 or SPC t 8 |
| +workspace/switch-to-8 | Switch to workspace 9               | C-1 or SPC t 9 |
| centaur-tabs-mode      | Toggle Tabs                         | SPC t h        |

#+begin_src emacs-lisp :tangle config.el
(setq +workspaces/display t)

(map! :leader
      (:prefix ("t". "buffer")
       :desc "Toggle tabs" "h" #'centaur-tabs-mode
       :desc "New Workspace" "n" #'+workspace/new
       :desc "Delete Workspace" "d" #'+workspace/delete
       :desc "Rename Workspace" "N" #'+workspace/new-named
       :desc "Swap Workspace left" "j" #'+workspace/swap-left
       :desc "Swap Workspace right" "k" #'+workspace/swap-right
       :desc "Load Workspace" "L" #'+workspace/load
       :desc "Switch to Workspace 1" "1" #'+workspace/switch-to-0
       :desc "Switch to Workspace 2" "2" #'+workspace/switch-to-1
       :desc "Switch to Workspace 3" "3" #'+workspace/switch-to-2
       :desc "Switch to Workspace 4" "4" #'+workspace/switch-to-3
       :desc "Switch to Workspace 5" "5" #'+workspace/switch-to-4
       :desc "Switch to Workspace 6" "6" #'+workspace/switch-to-5
       :desc "Switch to Workspace 7" "7" #'+workspace/switch-to-6
       :desc "Switch to Workspace 8" "8" #'+workspace/switch-to-7
       :desc "Switch to Workspace 9" "9" #'+workspace/switch-to-8))

(map! "C-1" #'+workspace/switch-to-0)
(map! "C-2" #'+workspace/switch-to-1)
(map! "C-3" #'+workspace/switch-to-2)
(map! "C-4" #'+workspace/switch-to-3)
(map! "C-5" #'+workspace/switch-to-4)
(map! "C-6" #'+workspace/switch-to-5)
(map! "C-7" #'+workspace/switch-to-6)
(map! "C-8" #'+workspace/switch-to-7)
(map! "C-9" #'+workspace/switch-to-8)
#+end_src

*** FILE MANAGEMENT
Keybindings for file management inside emacs
using dired and neotree.

**** DIRED
Bindings for Dired which is the emacs filemanager
This configuration allows me to use the vim keys inside of dired

| Command                 | Description              | Keybindings |
|-------------------------+--------------------------+-------------|
| dired-create-empty-file | Create new file          | SPC d c     |
| dired-create-directory  | Create new directory     | SPC d D     |
| dired-jump              | Open dired in new window | SPC o -     |


#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("d". "buffer")
       :desc "Make file in Dired" "c" #'dired-create-empty-file
       :desc "Make directory in Dired" "D" #'dired-create-directory))


(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src


**** NEOTREE
Keybindings to quickly access the neotree in emacs
neotree is very similar to Nerdtree in vim

| Command         | Description                         | Keybindings |
|-----------------+-------------------------------------+-------------|
| neotree         | Open neotree in current DIR         | SPC d o     |
| neotree-hide    | Hide neotree                        | SPC d h     |
| neotree-dir     | Choose in which DIR to open neotree | SPC d d     |
| neotree-refresh | Refresh Neotree                     | SPC d r     |
| neotree-toggle  | Toggle neotree on and off           | F5          |

#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("d". "buffer")
       :desc "Neotree current folder" "o" #'neotree
       :desc "Neotree Hide" "h" #'neotree-hide
       :desc "Neotree pick directory" "d" #'neotree-dir
       :desc "Neotree refresh" "r" #'neotree-refresh))

(map! "<f5>" #'neotree-toggle)
#+end_src

*** HARPOON
Keybinds for harpoon which lets you quickly access commonly used files
with only one keystroke. Which can really speed up your workflow.
I first discovered this plugin in neovim and wanted the same kind of
thing in emacs
| Command                  | Description          | Keybindings |
|--------------------------+----------------------+-------------|
| harpoon-quick-menu-hydra | Open hydra menu      | SPC j m    |
| harpoon-add-file         | Add file to the list | SPC j a    |
| harpoon-clear            | clear all the file   | SPC j c    |
| harpoon-toggle-file      | Toggle file          | SPC j t    |
| harpoon-go-to-1          | go to file 1         | SPC (1-9)   |
| harpoon-go-to-2          | go to file 2         | SPC (1-9)   |
| harpoon-go-to-3          | go to file 3         | SPC (1-9)   |
| harpoon-go-to-4          | go to file 4         | SPC (1-9)   |
| harpoon-go-to-5          | go to file 5         | SPC (1-9)   |
| harpoon-go-to-6          | go to file 6         | SPC (1-9)   |
| harpoon-go-to-7          | go to file 7         | SPC (1-9)   |
| harpoon-go-to-8          | go to file 8         | SPC (1-9)   |
| harpoon-go-to-9          | go to file 9         | SPC (1-9)   |


#+begin_src emacs-lisp :tangle config.el
;; You can use this hydra menu that have all the commands
(map! :leader "j m" 'harpoon-quick-menu-hydra)
(map! :leader "j a" 'harpoon-add-file)

;; And the vanilla commands
(map! :leader "j c" 'harpoon-clear)
(map! :leader "j t" 'harpoon-toggle-file)
(map! :leader "1" 'harpoon-go-to-1)
(map! :leader "2" 'harpoon-go-to-2)
(map! :leader "3" 'harpoon-go-to-3)
(map! :leader "4" 'harpoon-go-to-4)
(map! :leader "5" 'harpoon-go-to-5)
(map! :leader "6" 'harpoon-go-to-6)
(map! :leader "7" 'harpoon-go-to-7)
(map! :leader "8" 'harpoon-go-to-8)
(map! :leader "9" 'harpoon-go-to-9)
#+end_src


*** TERMINAL
Custom keybindings to open termninals within emacs
thins like term,vterm and eshell

| Command       | Description              | Keybindings |
|---------------+--------------------------+-------------|
| term          | Open Terminal in emacs   | SPC t t     |
| eshell        | Open eshell in emacs     | SPC t e     |
| eshell/toggle | Toggle eshell            | SPC t E     |
| +vterm/toggle | Open Vterminal in emacs  | SPC t V     |
| +vterm/here   | Open Vterm in fullscreen | SPC o T     |

#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("t". "buffer")
       :desc "Term" "t" #'term
       :desc "Eshell" "e" #'eshell
       :desc "Eshell Popup" "E" #'+eshell/toggle
       :desc "Vterm" "V" #'vterm))
#+end_src
** LINE NUMBERS
Settings for line numbers change relative to example absolute if you want
to see the exact line number of the file. But I always prefer relative
#+begin_src emacs-lisp :tangle config.el
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
#+end_src


** SHELL
Settings for the various shells inside of emacs. For example I set the alias file for eshell
#+begin_src emacs-lisp :tangle config.el
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)

(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)

(setq eshell-rc-script "~/.config/doom/eshell/profile"
      eshell-aliases-file "~/.config/doom/eshell/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

#+end_src

** START PAGE
#+begin_src emacs-lisp :tangle config.el
;;(setq initial-buffer-choice "~/.config/doom/start.org")
;;
;;(define-minor-mode start-mode
;;  "Provide functions for custom start page."
;;  :lighter " start"
;;  :keymap (let ((map (make-sparse-keymap)))
;;          ;;(define-key map (kbd "M-z") 'eshell)
;;            (evil-define-key 'normal start-mode-map
;;              (kbd "1") '(lambda () (interactive) (find-file "~/.config/doom/README.org"))
;;              (kbd "2") '(lambda () (interactive) (find-file "~/.config/doom/init.el"))
;;              (kbd "3") '(lambda () (interactive) (find-file "~/.config/doom/packages.el"))
;;              (kbd "4") '(lambda () (interactive) (find-file "~/.config/hypr/hyprland.conf"))
;;              (kbd "5") '(lambda () (interactive) (find-file "~/.scripts/sync/sync-script.org")))
;;          map))
;;
;;(add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
;;(provide 'start-mode)
#+end_src


** THEMES
Here you can set your prefered theme, I load my themes with the package doom-themes
So I have various themes to choose from. If you want to change theme change the variable
Load-theme to the prefered them you can also do 'SPC h' + t to change theme on the fly
But to make it permanent you need to modify config.el
#+begin_src emacs-lisp :tangle config.el

(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)

  (doom-themes-visual-bell-config)

  (doom-themes-neotree-config)

  (setq doom-themes-treemacs-theme "doom-tokyo-night")

  (doom-themes-treemacs-config)

  (doom-themes-org-config))


  (load-theme 'doom-tokyo-night t)



#+end_src
